<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 
		root-context.xml 
		서버구동과 동시에 web.xml파일을 거쳐서 로딩되는 문서
		- 서버구동과 동시에 세팅해야하는 내용들을 작성한다.
	 -->
	 
	 <context:property-placeholder location="classpath:datasource.properties"/>
	 
	 <!-- DB연결 설정 -->
	 <!-- 1단계) DB연결을 위한 도구 설정 -->
	 <bean class="org.apache.commons.dbcp.BasicDataSource" id="dataSource" destroy-method="close">
	 	<property name="driverClassName" value="${datasource.driverClassName}" />
	 	<property name="url" value="${datasource.url}" />
	 	<property name="username" value="${datasource.username}" />
	 	<property name="password" value="${datasource.password}" />	 	
	 </bean>
	 
	 <!-- 2단계) MyBatis Spring에서 제공하는 sql명령어 실행을 위한 도구 등록 -->
	 <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
	 	<!-- mybatis 설정파일 위치 지정 -->
	 	<property name="configLocation" value="classpath:mybatis-config.xml" />
	 		
	 	<!-- DB연결을 위한 도구 등록 -->
	 	<property name="dataSource" ref="dataSource" />
	 	<!-- 
	 		매퍼등록
	 		앞으로 생성할 모든 mapper파일을 한번에 읽어올 예정
	 	 -->
	 	<property name="mapperLocations" value="classpath*:mapper/**/*.xml" />
	 </bean>
	 
	 <!-- 3단계) SQL구문을 실행하기 위한 템플릿을 제공하는 도구(Bean) 등록
	 	  SqlSessionTemplate : SqlSession을 구현한 구현클래스
	  -->
	  <bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
	  	<constructor-arg ref="sqlSessionFactory" />
	  </bean>
	 
	 <!-- 
	 	transactionManager
	 	 - 데이터베이스 트랜잭션 처리를 담당하는 bean객체
	 	 - jdbc를 통해 커넥션을 얻어 트랜잭션을 시작/커밋/롤백을 시킴
	 	 - @Transactional 어노테이션을 통해 트랜잭션을 선언적으로 처리
	  -->
	 <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	 	<!-- 실제 db연결에 사용할 bean객체 주입  -->
	 	<property name="dataSource" ref="dataSource"/>
	 </bean> 
	 
	 <!-- DB연결 끝 -->
	 
	 <!-- 
	    multipartResolver
	 	 - Http요청 중 multipart/form-data(파일 업로드)형식의 데이터를 처리하는 bean객체
	 	 - Spring은 파일을 MultipartFile클래스로 변환해 컨트롤러에서 쉽게 사용할 수 있도록 처리한다.
	 	 
	  -->
	 <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	 	
	 	<!--  인코딩 처리 -->
	 	<property name="defaultEncoding" value="UTF-8"></property>
	 	<!-- 
	 		maxUploadSize : 업로드 되는 전체 파일의 크기 제한(바이트단위)	 		
	 		EX) 업로드크기가 10MB인경우 3+4+2 -> 9MB로 허용. 3+4+4 -> 11MB로 거부 
	 		
	 		maxInMemorySize : 업로드 처리 시 디스크에 임시파일을 생성하기 전, 메모리에
	 		보관할 파일의 최대 크기. 용량 초과시 하드디스크에 임시파일을 생성하여 처리.	 	
	 		메모리가 여유롭다면 크게, 적다면 작게 설정.	
	 		EX) 메모리크기가 10KB인 경우, 3KB데이터를 업로드시 메모리에 저장하고,
	 		    50KB이상인 경우 하드에 저장함.
	 	 -->
	 	 <property name="maxUploadSize"   value="10485760"></property>
	 	 <property name="maxInMemorySize" value="2097152"></property>
	 </bean>
	 
	 
	 
	 
	 
	 
	 
</beans>
