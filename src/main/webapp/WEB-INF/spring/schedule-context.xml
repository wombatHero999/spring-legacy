<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- 
		Spring Scheduler 
		- 일정한 시간 간격이나 특정 시점에 자동으로 실행되어야 하는 작업(프로세스, 배치 작업 
	     	등)을 간단하게 설정하고 수행할 수 있도록 지원하는 스프링 기능 ex) 매일 자정 로그파일 생성 등 
		- 복잡한 Timer 설정 없이 어노테이션만으로 간편하게 구성이 가능하다 
		- cron 표현식을 통해 유연한 스케줄링을 지정할 수 있다 
		- 기본적으로 단일 쓰레드로 동작하므로 병렬 실행이 필요한 경우 별도 설정가능 
		-->
	<!-- 1. @Scheduled 어노테이션을 인식하도록 활성화 -->
	<task:annotation-driven scheduler="khScheduler" />
	
	<!-- 2. 스케줄러가 포함된 클래스를 스캔해서 Bean으로 등록 -->
	<context:component-scan base-package="com.kh.spring.common.scheduling" />
	<context:component-scan base-package="com.kh.spring.board.model" />
	
	<!-- 3. 병렬 실행을 위한 스레드 풀을 갖는 TaskScheduler Bean 등록 -->
	<task:scheduler id="khScheduler" pool-size="10" />
	<!-- 
		pool-size: 동시에 실행 가능한 스케줄 작업 개수 (쓰레드 수)
		예: pool-size=10 → 최대 10개의 스케줄 메서드를 병렬 실행 가능
		
		pool-size를 늘리면, 동시에 여러 개의 @Scheduled 메서드가 실행되더라도 대기 없이 바로 실행됨.
		@Scheduled 메서드가 오래 걸리는 작업이라면, 단일 스레드일 경우 다음 작업이 지연될 수 있기 때문에 병렬 설정이 필요.
	-->
</beans>
